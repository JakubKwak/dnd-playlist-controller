package keybind

import (
	"fmt"
	"strings"

	"golang.design/x/hotkey"
)

type Keybind struct {
	Key       hotkey.Key
	Modifiers []hotkey.Modifier
	Handle    func()
}

var modMap = map[string]hotkey.Modifier{
	"ALT":   hotkey.ModAlt,
	"CTRL":  hotkey.ModCtrl,
	"SHIFT": hotkey.ModShift,
	"WIN":   hotkey.ModWin,
}

// dynamically generated by initKeyMap
var keyMap = map[string]hotkey.Key{}

func NewKeybind(key string, modifiers []string, handler func()) (Keybind, error) {
	initKeyMap()
	parsedKey, valid := keyMap[strings.ToUpper(key)]
	if !valid {
		return Keybind{}, fmt.Errorf("%s is not a valid key", key)
	}
	mods := []hotkey.Modifier{}
	for _, modifier := range modifiers {
		mod, valid := modMap[strings.ToUpper(modifier)]
		if !valid {
			return Keybind{}, fmt.Errorf("%s is not a valid modifier", modifier)
		}
		mods = append(mods, mod)
	}

	return Keybind{
		Key:       parsedKey,
		Modifiers: mods,
		Handle:    handler,
	}, nil
}

// dynamically generate the map for string -> hotkey, once only
func initKeyMap() {
	if len(keyMap) > 0 {
		return // already initialised
	}
	// Add numbers 0-9
	for i := 0; i <= 9; i++ {
		keyMap[fmt.Sprintf("%d", i)] = hotkey.Key(0x30 + i)
	}
	// Add letters A-Z
	for i := 'A'; i <= 'Z'; i++ {
		keyMap[string(i)] = hotkey.Key(i)
	}
	// Add function keys F1-F20
	for i := 1; i <= 20; i++ {
		keyMap[fmt.Sprintf("F%d", i)] = hotkey.Key(0x70 + (i - 1))
	}
}
